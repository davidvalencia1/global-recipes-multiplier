[mod-setting-name]
global-multiplier-mult=Global recipe multiplier
global-multiplier-nonint-mode=Noninteger multiplier handling
global-multiplier-affects-time=Multiply recipe time
global-multiplier-ignores-barrels=Ignore barrel recipes
global-multiplier-mult-energy=Global recipe energy multiplier

[mod-setting-description]
global-multiplier-mult=Recipe results multiply by this value. Non-integer numbers are allowed.
global-multiplier-nonint-mode=If the multiplier is not an integer, this is how item costs will be rounded to integers.
global-multiplier-affects-time=If this is enabled, the time of recipe results will also be multiplied.
global-multiplier-ignores-barrels=Barrel fill and empty recipe results won't be subject to multiplication, so they are still feasible.
global-multiplier-mult-energy=All assembly machine will have their energy consumption multiplied by this. Non-integer numbers are allowed.

[string-mod-setting]
global-multiplier-nonint-mode-multiply=Multiply
global-multiplier-nonint-mode-roundup=Round up
global-multiplier-nonint-mode-rounddown=Round down
global-multiplier-nonint-mode-roundeven=Round evenly

[string-mod-setting-description]
global-multiplier-nonint-mode-multiply=Multiplies the input, output and times of recipes until their values are integers. Can cause productivity to become better than it should be, and high-denominator multipliers may cause very skewed values. Experimental.
global-multiplier-nonint-mode-roundup=Rounds resulting item costs up to the nearest integer.
global-multiplier-nonint-mode-rounddown=Round resulting item costs down to the nearest integer. This could cause item costs to fall to 0 if the multiplier is below 1, beware.
global-multiplier-nonint-mode-roundeven=Round resulting item costs to the nearest integer. This could cause item costs to fall to 0 if the multiplier is below 0.5, beware.
